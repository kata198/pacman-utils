#!/usr/bin/env python

# vim: set ts=4 sw=4 expandtab :

# Copyright (c) 2017 Timothy Savannah - All Rights Reserved
#   This code is licensed under the terms of the APACHE license version 2.0
#
#  whatprovides_upstream.py - Checks the upstream provides json database
#    created by extractMtree.py
#
#  Provide a filename, and it returns what packages would provide that item,
#   without that package needant be installed

import gzip
import json
import os
import sys
import subprocess
import re

PROVIDES_DB = '/var/lib/pacman/.providesDB'

SUPPORTED_DB_VERSION = '0.2'

def globToRE(globStr):

    pattern = globStr.replace('.', '[\\.]').replace('*', '.*').replace('?', '.') + '$'

    return re.compile(pattern)

if __name__ == '__main__':

    if len(sys.argv) != 2 or '--help' in sys.argv[1:]:
        sys.stderr.write('Usage: whatprovides_upstream [filename]\n  Prints the packages that provide a filename.\n\n')
        sys.stderr.write('Uses the upstraem database at \"%s\".\nQueries all available packages, not just installed packages.\n\n' %(PROVIDES_DB,))
        sys.stderr.write('A glob expression may be used by including a "*" in the query. E.x. "*/ld.so.conf"\n')
        sys.stderr.write('  When in glob-mode, the matching package will be printed, followed by a tab, followed by matched filename.\n\n')
        sys.exit(0)


    queryVal = sys.argv[1]
    if '*' not in queryVal:
        if os.path.isdir(queryVal) and queryVal[-1] != '/':
            queryVal = queryVal + '/'

        if '/' not in queryVal:
            for pathVal in os.environ['PATH'].split(':'):
                while pathVal[-1] == '/':
                    pathVal = pathVal[:-1]
                tryPath = pathVal + '/' + queryVal
                if os.path.exists(tryPath):
                    queryVal = tryPath
                    break

    if not os.path.exists(PROVIDES_DB) or not os.access(PROVIDES_DB, os.R_OK):
        sys.stderr.write("No database or can't read database from %s. Use a pre-provided database (check the homepage) or run extractMtree.py to build your own.\n\n")
        sys.exit(2)

    with open('/var/lib/pacman/.providesDB', 'rb') as f:
        fileContents = f.read()

    fileContents = gzip.decompress(fileContents)
    fileContents = fileContents.decode('utf-8')

    providesMap = json.loads(fileContents)

    try:
        version = providesMap.pop('__vers')
    except:
        version = None

    if version != SUPPORTED_DB_VERSION:
        sys.stderr.write('providesDB version %s is not the supported version, %s.\nEither download a new providesDB or run extractMtree.py --convert to convert\n\n' %( str(version), SUPPORTED_DB_VERSION))
        sys.exit(2)

#    providesMap = { name : set(val) for name, val in providesMap.items() }

    providedBy = []

    if '*' in queryVal or '?' in queryVal:
        # If did not start with an absolute path or a wildcard, add a wildcard to the front
        #  (otherwise will never match anything)
        if not queryVal.startswith( ('/', '*') ):
            queryVal = '*' + queryVal

        queryRE = globToRE(queryVal)

        for pkg, pkgProvides in providesMap.items():
            for pkgProvide in pkgProvides['files']:
                if queryRE.match(pkgProvide):
                    providedBy.append( (pkg, pkgProvide) )

        toPrint = ["%s\t%s" %(pkgName, pkgProvide) for pkgName, pkgProvide in providedBy ]
        toPrint.sort()

        print ( '\n'.join( toPrint ) )

    else:

        for pkg, pkgProvides in providesMap.items():
            if queryVal in pkgProvides['files']:
                providedBy.append(pkg)

        providedBy.sort()

        print ( '\n'.join(providedBy) )


    # vim: set ts=4 sw=4 expandtab :
