#
#  makepkg.conf - Define makepkg defaults
#       + ADDON PATCHES FOR BASIC PROFILING SUPPORT
#
#   Will default cflags to NATIVE, and provides an infrastructure for
#     defining and switching CFLAGS in various pkgbuilds with standard function names
#

#===================================================================================================
#
##  ADDITIONAL FUNCTIONS ( Add these to your PKGBUILDs, generally in the build() prior to configure
#
#       These are an overview of some common functions you can call within your PKGBUILD files to
#         invoke common tasks, change settings, perform PGO, adjust debugging levels, etc.
#
#       Functions and sections may also have more or less detailed notes on operation
#        ath the point of function definition within a comment header.
#       Check both places if necessary.
#
#
#  Optimization Flags:
#  -------------------
#
#     apply_CFLAGS - Will apply a set of CFLAGS, CXXFLAGS, LDFLAGS if a profile added, otherwise none.
#
#     set_CFLAGS   - Alias for apply_CFLAGS
#
#       available profiles ( set the DEFAULT_USE_CFLAGS param )
#
#          * NATIVE       - Default. native for system, no LTO
#          * NATIVE_LTO   - Native for system, including LTO ( much better performance, but doesn't always work )
#
#          * SAFE         - Will perform lesser-optimized and for generic systems (i.e. no machine-specific changes)
#          * SAFE_LTO     - SAFE, with link-time optimization ( much better performance, but doesn't always work )
#
#
#  Profiling:
#  ----------
#
#      After you pick some cflags, you can set some profiling modes:
#
#        set_cflags_do_profile  - A single change in the PKGBUILD before Configure, put this line.
#                                   If "gcda.tar" is present in dir, profling will be set to "use",
#                                     otherwise it will be set to "generate". More info below.
#
#        set_cflags_profile_generate - Turn profiling generation on
#        set_cflags_profile_use      - Use existing profiling information, found in .gcda files (see below)
#
#   NOTE: The above functions inherit the base CFLAGS profile (from apply_CFLAGS / DEFAULT_USE_CFLAGS),
#      and apply additional flags to use profiling
#
#   NOTE: The above 3 functions take an optional arg, "nolto". E.x.  set_cflags_do_profile "nolto"
#      By default, lto and linker plugin are used (-flto -fuse-linker-plugin).
#      Providing the argument "nolto" (no LTO) will exclude these, as some applications will not
#       compile with LTO / ld.gold
#
#    RECOMMENDED APPROACH FOR PGO (profile-guided optimization): 
#     Since a lot of system's "cleans" will remove your gcda files you spent so much
#      time collecting, and you'll need to clean to rebuild and use profiles, please follow this approach.
#
#    1. Add "set_cflags_do_profile" before "configure" step in the "build" method of PKGBUILD
#    2. Build package, install resulting package.
#    3. Restart the program being profiled, twice (if it is a daemon). This will ensure you are logging to gcda
#    4. If it is a root daemon, or may be run by root, 
#      make sure to change all directories to be '2775' and make sure group matches "users",
#        Restart and run the program a few times, and chmod g+w all the *.gcda files, i.e.  
#          * find . -name '*.gcda' -exec chmod g+w '{}' ';'
#          * find . -type d -exec chmod 2775 '{}' ';'
#          * find . -type d -exec chgrp users '{}' ';'
#
#    5. If not, set up a benchmark that runs the program with similar patterns that you would execute it under,
#         or just be general
#    6. If daemon, restart the program again
#    7. In the "sources/whatever" directory, (like sources/gtk-3.10.44), run "mkgcdatar". This will create gcda.tar
#        And copy it to the parent and parent-of-parent directory.
#    8. Run "make distclean" or remove the sources directory
#    9. Run makepkg again, the do_profile will find and extract gcda.tar at the right moment, and profling information
#        will be used
#
#
#  TO GET PACKAGE BUILDS AND BUILD YOUR OWN PACKAGES WITH CFLAGS OR PGO DESCRIBED ABOVE:
#    Just once, create /usr/src/arch:
#       sudo mkdir -p /usr/src/arch  # or as root
#       sudo chown "YOUR_USERNAME" /usr/src/arch  # or as root
#
#   Then, cd into that directory, and use  use 'archsrc-getpkg' (shipped with pacman-utils)
#     to download the package safely into that directory. Therein you'll find a PKGBUILD
#     wihch you can edit as noted above to use CFLAGS or PROFILE (or you can set DEFAULT_USE_CFLAGS in
#      this file to just default to some CFLAGS, but if you're gonna go that route... why not get
#      up to 50% better performance by doing PGO? 
#      (I got that on Redis just by running redis-cli benchmark and then saving gcda and rebuilding )
#
#   If you modify DEFAULT_USE_CFLAGS below, you can do non-pgo builds just with "buildpkg.sh" script
#
#
#  Alternate Compiler (clang):
#  ---------------------------
#
#   For some projects, you can achieve better optimization by using the clang compiler instead
#     of GCC. clang is based on LLVM, and you should check benchmarks on the specific project
#     to learn if clang produces faster code than gcc -- or you dor own experimentation!
#
#  Verbosity
#  ---------
#
#   Verbosity / Quiet mode can be controlled with the related functions.
#
#      Default is to set make mode to verbose ( level 1 ), which will print the full
#        commandline strings when compiling.
#
#      Common options are:
#
#         0    - Quiet Mode     ( just says things like   "CC  unit.c"  )
#         1    - Verbose Mode   ( full commandline of each command )  DEFAULT
#         2    - Super Verbose  ( Some projects support this, may print additional info )
#
#
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


# TODO: Make adding additional profiles simple using eval ( simple), so only envs need to be added
# TODO: Right now CFLAGS and CXXFLAGS are always set to the same. Make this optional.
#


#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('ftp::/usr/bin/curl -fC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget

#-- The package required by makepkg to download VCS sources
#  Format: 'protocol::package'
VCSCLIENTS=('bzr::bzr'
            'git::git'
            'hg::mercurial'
            'svn::subversion')


#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#
CARCH="x86_64"
#CHOST="x86_64-unknown-linux-gnu"
CHOST="x86_64-pc-linux-gnu"


####################
###
## Optimization Profile
##
################

if ( ! which notin >/dev/null 2>&1 );
then
  # shell-advancedutils is not installed, do some cheap impls
  notin() {
    HAYSTACK="$(cat --)"
    
    for arg in "$@";
    do
        if [ "${arg}" = "${HAYSTACK}" ];
        then
            return 1;
        fi
    done
    return 0;
  }
fi

#CPPFLAGS="-D_FORTIFY_SOURCE=2"

NATIVE_CFLAGS="-march=native -mtune=native -O3 -pipe"
#NATIVE_LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro"
#NATIVE_LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro -Wl,-z,combreloc"
NATIVE_LDFLAGS="-Wl,-O1,--sort-common,-z,relro,-z,combreloc"

export NATIVE_CFLAGS NATIVE_LDFLAGS

SAFE_CFLAGS="-mtune=generic -O2 -pipe"
SAFE_LDFLAGS="-Wl,-O1,--sort-common,-zrelro,-z,combreloc"

export SAFE_CFLAGS SAFE_LDFLAGS

__LTO_FLAGS="-flto=jobserver -fuse-linker-plugin"

LTO_CFLAGS="${SAFE_CFLAGS} ${__LTO_FLAGS}"
LTO_LDFLAGS="${SAFE_LDFLAGS} ${__LTO_FLAGS}"

export LTO_CFLAGS LTO_LDFLAGS

SAFE_LTO_CFLAGS="${LTO_CFLAGS}"
SAFE_LTO_LDFLAGS="${LTO_LDFLAGS}"

export SAFE_LTO_CFLAGS
export SAFE_LTO_LDFLAGS

NATIVE_LTO_CFLAGS="${NATIVE_CFLAGS} ${__LTO_FLAGS}"
NATIVE_LTO_LDFLAGS="${NATIVE_LDFLAGS} ${__LTO_FLAGS}"

export NATIVE_LTO_CFLAGS NATIVE_LTO_LDFLAGS

export AVAILABLE_USE_CFLAGS="NATIVE SAFE LTO NATIVE_LTO SAFE_LTO"
export AVAILABLE_USE_CFLAGS_FOR_PRINT="\t-  NATIVE\n\t- SAFE\n\t- LTO\n\t- NATIVE_LTO\n\t- SAFE_LTO\n"

apply_NATIVE_CFLAGS() {
	export CFLAGS="${NATIVE_CFLAGS}"
	export CXXFLAGS="${CFLAGS}"
	export LDFLAGS="${NATIVE_LDFLAGS}"
}

apply_SAFE_CFLAGS() {
  export CFLAGS="${SAFE_CFLAGS}"
  export CXXFLAGS="${CFLAGS}"
  export LDFLAGS="${SAFE_LDFLAGS}"
}

apply_LTO_CFLAGS() {
  export CFLAGS="${LTO_CFLAGS}"
  export CXXFLAGS="${CFLAGS}"
  export LDFLAGS="${LTO_LDFLAGS}"
}

apply_NATIVE_LTO_CFLAGS() {
  export CFLAGS="${NATIVE_LTO_CFLAGS}"
  export CXXFLAGS="${CFLAGS}"
  export LDFLAGS="${NATIVE_LTO_LDFLAGS}"
}

apply_SAFE_LTO_CFLAGS() {
    apply_LTO_CFLAGS
}

#==============================================================================
#  apply_CFLAGS -
#       Applys a CFLAGS/CXXFLAGS profile to the current session.
#
#    See above ( $AVAILABLE_USE_CFLAGS ) for a list of available profiles.
#
#      Make your own profile by adding an entry to that list, and defining
#         a function named   apply_MYNAME_CFLAGS   where "MYNAME" is the profile name.
#
#       That's it! Just define that function and  add it to the list of available and
#          you can use it within PKGBUILD so associate profiles with packages.
#-------------------------------------------------------------------------------

apply_CFLAGS() {
  if [ -z "$1" ];
  then
      printf "Warning: no CFLAG group specified to apply_CFLAGS -\n   assuming DEFAULT_USE_CFLAGS from /etc/makepkg.conf - '${DEFAULT_USE_CFLAGS}'\n\n" >&2
      USE_FLAGS="${DEFAULT_USE_CFLAGS}"
  elif [ "$1" = "-h" -o "$1" = "--help" -o "$1" = "-?" ];
  then
      printf "\nAvailable choices:\n\n${AVAILABLE_USE_CFLAGS_FOR_PRINT}\n" >&2
      return 1
  else
      USE_CFLAGS="$1"

      if ( echo "${USE_CFLAGS}" | notin ${AVAILABLE_USE_CFLAGS} );
      then
          printf "\nInvalid USE_CFLAGS value='%s'.\nAvailable choices:\n\n%s\n" "${USE_CFLAGS}" "${AVAILABLE_USE_CFLAGS_FOR_PRINT}" >&2
          return 1
      fi
  fi


  eval "apply_$(echo "${USE_CFLAGS}" | tr 'a-z' 'A-Z')_CFLAGS"

  printf "CFLAGS: %s\nLDFLAGS: %s\n" "${CFLAGS}" "${LDFLAGS}" >&2
}

set_CFLAGS() {
  apply_CFLAGS
}

#=+=+=+--+=+=+==+=+=+--+=+=+==+=+=+--+=+=+==+=+=+--+=+=+=
##     Set the default profile to use for all builds
#         (unless overridden)
#=+=+=+--+=+=+==+=+=+--+=+=+==+=+=+--+=+=+==+=+=+--+=+=+=

# DEFAULT_USE_CFLAGS - The default profile to use (unless overridden)
DEFAULT_USE_CFLAGS="NATIVE"
#DEFAULT_USE_CFLAGS="NATIVE_LTO"

export DEFAULT_USE_CFLAGS

# Aply the default profile
apply_CFLAGS "${DEFAULT_USE_CFLAGS}"




#########################################################################
# PGO functions - Use these for profile guided optimization
#########################################################################


set_cflags_profile_generate() {
  if [ "$1" != "nolto" ];
  then
	  export CFLAGS="${CFLAGS} -flto=jobserver -fuse-linker-plugin -fprofile-generate -fprofile-update=prefer-atomic -Wno-error"
	  export CXXFLAGS="${CFLAGS}"
	  export LDFLAGS="${LDFLAGS} -flto=jobserver -fuse-linker-plugin -fprofile-generate -fprofile-update=prefer-atomic -Wno-error"
  else
	  export CFLAGS="${CFLAGS} -fprofile-generate -fprofile-update=prefer-atomic -Wno-error"
	  export CXXFLAGS="${CFLAGS}"
	  export LDFLAGS="${LDFLAGS} -fprofile-generate -fprofile-update=prefer-atomic -Wno-error"
  fi
}

set_cflags_profile_use() {
  if [ "$1" != "nolto" ];
  then
	  export CFLAGS="${CFLAGS} -flto=jobserver -fuse-linker-plugin -fprofile-use -fprofile-correction -Wno-error"
	  export CXXFLAGS="${CFLAGS}"
	  export LDFLAGS="${LDFLAGS} -flto=jobserver -fuse-linker-plugin -fprofile-use -fprofile-correction -Wno-error"
  else
	  export CFLAGS="${CFLAGS} -fprofile-use -fprofile-correction -Wno-error"
	  export CXXFLAGS="${CFLAGS}"
	  export LDFLAGS="${LDFLAGS} -fprofile-use -fprofile-correction -Wno-error"
  fi

}

set_cflags_do_profile() {
  if [ -f "${startdir}/gcda.tar" ];
  then
      tar -xf "${startdir}/gcda.tar"
      set_cflags_profile_use $1
  else
      set_cflags_profile_generate $1
  fi
}


######################################################
##            Make Flags                             #
######################################################

#    This section deals with setting MAKEFLAGS

MAKEFLAGS="-j3 V=1"
V=1

export MAKEFLAGS
export V

######################################################
## set_make_verbose - Set the verbosity level of make.
#
#      With no arguments, will set "verbose" (level 1)    [ "1" ]
#       Some projects have an additional level (level 2)  [ "2" ]
#
#     Provide "0" to disable verbose mode and be quiet    [ "0" ]
#
#  Example:  set_make_verbose 2
#++++++++++++++++++++++++++++++++++++++++++++++++++++++

set_make_verbose() {

  LEVEL="$1"

  if [ -z "${LEVEL}" ];
  then
      LEVEL="1"
  elif ( ! printf "${LEVEL}" | grep -E '^[0-9][0-9]*$' );
  then
    printf "ERROR: set_make_verbose: argument 'LEVEL' must be an integer, but got: '%s'\n" "${LEVEL}" >&2
    printf "\n  Avaialble Modes:\n" >&2
    printf "\t   0  -  \"quiet mode\"      \t- generally just prints things like CC filename.c\n" >&2
    printf "\t   1  -  \"verbose mode\"    \t- generally prints the full commandline string for all operation\n" >&2
    printf "\t   2  -  \"super verbose mode\" \t- supported by some projects, verbose mode and may print extra info\n" >&2

    return 1
  fi

  # export the V code directly
  export V="${LEVEL}"

  
  if [ -z "${MAKEFLAGS}" ];
  #    if MAKEFLAGS is empty, append the V code
  then

      MAKEFLAGS="V=${LEVEL}"

  elif ( echo "${MAKEFLAGS}" | grep -qE '(^| )[V][=]([0-9][0-9]*|[ ]|$)' );
  #     if MAKEFLAGS starts with V=###, OR
  #        contains V=### as an independent key=value, OR
  #        contains an empty value, like BLAH=XX V= q=BLAH, or
  #        ends with an empty value, like "-j3 V="
  #     we will replace it with the new value
  then

      # NOTE: Have to just use the pattern to clear and then append V here, else use multiple patterns
      #          to handle spacing issues.
      MAKEFLAGS="$(echo "${MAKEFLAGS}" | sed -E 's/(^| )[V][=]([0-9][0-9]*|[ ]|$)//g')"

      # Instead of blindly appending " V=${LEVEL}" lets add a conditional to be pretty
      #   in the case that makeflags started with V=
      if [ -z "${MAKEFLAGS}" ];
      then
          MAKEFLAGS="V=${LEVEL}"
      else
          MAKEFLAGS="${MAKEFLAGS} V=${LEVEL}"
      fi

  else
  #   No V=## set at all, either missing or not set to a number (invalid).
  #     So just append to the end of MAKEFLAGS.
  #
  #   This could probably be combined with the -z test,
  #      with only side effect being an unnecessary leading space.

      MAKEFLAGS="${MAKEFLAGS} V=${LEVEL}"

  fi

  # Kick it to a global!
  export MAKEFLAGS

}

######################################################
## set_make_quiet - Do "quiet mode" on make.
#
#    This normally just prints like "CC file.c" instead
#       of the full compile commandline string.
#
#    This is effectively an alias of: "set_make_verbose 0"
#
#  Example:  set_make_quiet
#++++++++++++++++++++++++++++++++++++++++++++++++++++++

set_make_quiet() {

  set_make_verbose "0"

}


######################################################
## set_make_super_verbose - Set make to log very verbosely
#
#    This, when different than V=1 on some projects, will print
#       everything possible.
#
#    This is effectively an alias of: "set_make_verbose 2"
#
#  Example:  set_make_super_verbose
#++++++++++++++++++++++++++++++++++++++++++++++++++++++

set_make_super_verbose() {

  set_make_verbose "2"

}


#++++++++++++++++++++++++++++++++++++++++++++++++++++++
######################################################+
##            Compiler Selection                      +
######################################################+
#++++++++++++++++++++++++++++++++++++++++++++++++++++++

#    This section deals with selecting alternate compilers




# CC / CXX - Set the default C and C++ compilers to be
#   the GCC suite.
#
#  Use "set_clang" function to instead use the clang compiler suite
export CC="/usr/bin/gcc"
export CXX="/usr/bin/g++"


########################################@@@@@@@@@@@@@@@@@@@@@
##  use_gcc  - Select GCC as the compiler suite to use
#
#       Also takes an optional argument, PROFILE,
#         which will be passed to apply_CFLAGS if provided
#         ( see apply_CFLAGS function for more info )
###
########################################$$$$$$$$$$$$$$$$$$$$$$$$$
    
use_gcc() {

  export CC="/usr/bin/gcc"
  export CXX="/usr/bin/g++"

  if [ $# -gt 0 ];
  then

      PROFILE="$1"
      shift

      apply_CFLAGS "${PROFILE}"

      if [ $# -gt 0 ];
      then
          EXTRA_ARGS=($@)
          prnitf "WARNING: $# unhandled args to 'use_gcc' function: %s\n\n" "${EXTRA_ARGS[@]}" >&2
      fi
  fi

}

# use_gcc_native - Just an alias of use_gcc NATIVE,
#     to be name-compatible with use_clang NATIVE
use_gcc_native() {
  
  use_gcc

  apply_CFLAGS NATIVE

}


########################################@@@@@@@@@@@@@@@@@@@@@
##  use_clang  - Select CLANG as the compiler suite to use
#
#       Also takes an optional argument, PROFILE,
#         which will be passed to apply_CFLAGS if provided
#         ( see apply_CFLAGS function for more info )
###
########################################$$$$$$$$$$$$$$$$$$$$$$$$$

use_clang() {
  export CC="/usr/bin/clang"
  export CXX="/usr/bin/clang++"

  #export CFLAGS="-mtune=native -march=native -O3 -fvectorize -funroll-loops -fslp-vectorize -pipe"
  #export CXXFLAGS="$CFLAGS"
}

# use_clang_native - Will select the clang compiler suite, and also use native flags
#   which are specific to clang+

use_clang_native() {

  use_clang

  export CFLAGS="-mtune=native -march=native -O3 -fvectorize -funroll-loops -fslp-vectorize -pipe"
  export CXXFLAGS="$CFLAGS"
}

#use_clang_profile() {
#
# # Removed -- just merge with use_clang function
#
#  PROFILE="$1"
#
#  use_clang
#
##  apply_CFLAGS "${PROFILE}"
#
#}

#CFLAGS_GRAPHITE="${CFLAGS} -floop-parallelize-all -ftree-parallelize-loops=4 -fgraphite-identity -fopenmp"
#LDFLAGS_GRAPHITE="${LDFLAGS} -fopenmp"
#CXXFLAGS="-mtune=native -march=native -O3 -pipe --param=ssp-buffer-size=4"
#LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro -fopenmp  "
#-- Make Flags: change this for DistCC/SMP systems
#-- Debugging flags
DEBUG_CFLAGS="-g -fvar-tracking-assignments"
DEBUG_CXXFLAGS="-g -fvar-tracking-assignments"

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Defaults: BUILDENV=(fakeroot !distcc color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- fakeroot: Allow building packages as a non-root user
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(fakeroot !distcc color !ccache !check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=""
#
#-- Specify a directory for package building.
#BUILDDIR=/tmp/makepkg

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Default: OPTIONS=(strip docs libtool staticlibs emptydirs zipman purge !upx !debug)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- optipng:    Optimize PNG images with optipng
#-- upx:        Compress binary executable files using UPX
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#
OPTIONS=(strip docs libtool staticlibs emptydirs zipman purge !optipng !upx !debug)

#-- File integrity checks to use. Valid: md5, sha1, sha256, sha384, sha512
INTEGRITY_CHECK=(md5)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-unneeded --strip-debug"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
#PKGDEST=/home/packages
#-- Source cache: specify a fixed directory where source files will be cached
#SRCDEST=/home/sources
#-- Source packages: specify a fixed directory where all src packages will be placed
#SRCPKGDEST=/home/srcpackages
#-- Log files: specify a fixed directory where all log files will be placed
LOGDEST=/usr/src/arch/LOGS
[ ! -d "${LOGDEST}" ] && mkdir -p "${LOGDEST}"
#-- Packager: name/email of the person or organization building packages
#PACKAGER="John Doe <john@doe.com>"
#-- Specify a key to use for package signing
#GPGKEY=""

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(gzip -c -f -n)
COMPRESSLZ4=(lz4 -z -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
# WARNING: Do NOT modify these variables unless you know what you are
#          doing.
#
PKGEXT='.pkg.tar.xz'
#PKGEXT='.pkg.tar.lz4'
SRCEXT='.src.tar.gz'

# vim: set ft=sh ts=2 sw=2 et:
