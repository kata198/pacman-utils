#
# /etc/makepkg.conf
#

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('ftp::/usr/bin/curl -fC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget
VCSCLIENTS=('bzr::bzr'
            'git::git'
            'hg::mercurial'
            'svn::subversion')


#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#
CARCH="x86_64"
#CHOST="x86_64-unknown-linux-gnu"
CHOST="x86_64-pc-linux-gnu"

#-- Compiler and Linker Flags
# -march (or -mcpu) builds exclusively for an architecture
# -mtune optimizes for an architecture, but builds for whole processor family
#CPPFLAGS="-D_FORTIFY_SOURCE=2"
#SAFE_CFLAGS="-mtune=native -march=native -O3 -pthread -fopenmp -ftree-parallelize-loops=4  -pipe"

NATIVE_CFLAGS="-march=native -mtune=native -O3 -pipe"
NATIVE_LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro -Wl,-z,combreloc"

SAFE_CFLAGS="-march=ivybridge -mtune=native -O3 -pipe"
SAFE_LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro"

export SAFE_CFLAGS SAFE_LDFLAGS

LTO_CFLAGS="${SAFE_CFLAGS} -flto"
LTO_LDFLAGS="${SAFE_LDFLAGS},-flto"

export LTO_CFLAGS LTO_LDFLAGS

SUPER_LTO_CFLAGS="${LTO_CFLAGS} -Wl,-hashvals -fuse-linker-plugin"
SUPER_LTO_LDFLAGS="${LTO_LDFLAGS},-hashvals"

DEFAULT_USE_CFLAGS="NATIVE"

#DEFAULT_USE_CFLAGS="LTO"

export DEFAULT_USE_CFLAGS

export AVAILABLE_USE_CFLAGS="NATIVE SAFE LTO SUPER_LTO"
export AVAILABLE_USE_CFLAGS_FOR_PRINT="\t-  NATIVE\n\t- SAFE\n\t- LTO\n\t- SUPER_LTO\n"

apply_NATIVE_CFLAGS() {
	export CFLAGS="${NATIVE_CFLAGS}"
	export CXXFLAGS="${CFLAGS}"
	export LDFLAGS="${NATIVE_LDFLAGS}"
}

apply_SAFE_CFLAGS() {
  export CFLAGS="${SAFE_CFLAGS}"
  export CXXFLAGS="${CFLAGS}"
  export LDFLAGS="${SAFE_LDFLAGS}"
}

apply_LTO_CFLAGS() {
  export CFLAGS="${LTO_CFLAGS}"
  export CXXFLAGS="${CFLAGS}"
  export LDFLAGS="${LTO_LDFLAGS}"
}

apply_SUPER_LTO_CFLAGS() {
  export CFLAGS="${SUPER_LTO_CFLAGS}"
  export CXXFLAGS="${CFLAGS}"
  export LDFLAGS="${SUPER_LTO_LDFLAGS}"
}


apply_CFLAGS() {
  if [ -z "$1" ];
  then
      printf "Warning: no CFLAG group specified to apply_CFLAGS -\n   assuming DEFAULT_USE_CFLAGS from /etc/makepkg.conf - '${DEFAULT_USE_CFLAGS}'\n\n" >&2
      USE_FLAGS="${DEFAULT_USE_CFLAGS}"
  elif [ "$1" = "-h" -o "$1" = "--help" -o "$1" = "-?" ];
  then
      printf "\nAvailable choices:\n\n${AVAILABLE_USE_CFLAGS_FOR_PRINT}\n" >&2
      return 1
  else
      USE_CFLAGS="$1"

      if ( echo "${USE_CFLAGS}" | notin ${AVAILABLE_USE_CFLAGS} );
      then
          printf "\nInvalid USE_CFLAGS value='%s'.\nAvailable choices:\n\n%s\n" "${USE_CFLAGS}" "${AVAILABLE_USE_CFLAGS_FOR_PRINT}" >&2
          return 1
      fi
  fi


  eval "apply_$(echo "${USE_CFLAGS}" | tr 'a-z' 'A-Z')_CFLAGS"

  printf "CFLAGS: %s\nLDFLAGS: %s\n" "${CFLAGS}" "${LDFLAGS}" >&2
}

apply_CFLAGS "${DEFAULT_USE_CFLAGS}"

set_cflags_profile_generate() {
  export CFLAGS="${CFLAGS} -flto=jobserver -fuse-linker-plugin -fprofile-generate -Wno-error"
  export CXXFLAGS="${CFLAGS}"
  export LDFLAGS="${LDFLAGS} -flto=jobserver -fuse-linker-plugin -fprofile-generate -Wno-error"
}

set_cflags_profile_use() {
  export CFLAGS="${CFLAGS} -flto=jobserver -fuse-linker-plugin -fprofile-use -fprofile-correction -Wno-error"
  export CXXFLAGS="${CFLAGS}"
  export LDFLAGS="${LDFLAGS} -flto=jobserver -fuse-linker-plugin -fprofile-use -fprofile-correction -Wno-error"
#  export MAKEFLAGS="-j1 V=1"
}

set_cflags_do_profile() {
  if [ -f "${startdir}/gcda.tar" ];
  then
      tar -xf "${startdir}/gcda.tar"
      set_cflags_profile_use
  else
      set_cflags_profile_generate
  fi
}


# SAFE
# CFLAGS="${SAFE_CFLAGS}"

# LTO

MAKEFLAGS="-j3 V=1"
V=1

use_clang() {
  export CC="clang"
  export CXX="clang++"
  export CFLAGS="-mtune=native -march=native -O3 -fvectorize -funroll-loops -fslp-vectorize -pipe"
  export CXXFLAGS="$CFLAGS"
}
#CFLAGS_GRAPHITE="${CFLAGS} -floop-parallelize-all -ftree-parallelize-loops=4 -fgraphite-identity -fopenmp"
#LDFLAGS_GRAPHITE="${LDFLAGS} -fopenmp"
#CXXFLAGS="-mtune=native -march=native -O3 -pipe --param=ssp-buffer-size=4"
#LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro -fopenmp  "
#-- Make Flags: change this for DistCC/SMP systems
#-- Debugging flags
DEBUG_CFLAGS="-g -fvar-tracking-assignments"
DEBUG_CXXFLAGS="-g -fvar-tracking-assignments"

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Defaults: BUILDENV=(fakeroot !distcc color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- fakeroot: Allow building packages as a non-root user
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(fakeroot !distcc color !ccache !check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=""
#
#-- Specify a directory for package building.
#BUILDDIR=/tmp/makepkg

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Default: OPTIONS=(strip docs libtool staticlibs emptydirs zipman purge !upx !debug)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- optipng:    Optimize PNG images with optipng
#-- upx:        Compress binary executable files using UPX
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#
OPTIONS=(strip docs libtool staticlibs emptydirs zipman purge !optipng !upx !debug)

#-- File integrity checks to use. Valid: md5, sha1, sha256, sha384, sha512
INTEGRITY_CHECK=(md5)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
#PKGDEST=/home/packages
#-- Source cache: specify a fixed directory where source files will be cached
#SRCDEST=/home/sources
#-- Source packages: specify a fixed directory where all src packages will be placed
#SRCPKGDEST=/home/srcpackages
#-- Packager: name/email of the person or organization building packages
#PACKAGER="John Doe <john@doe.com>"
#-- Specify a key to use for package signing
#GPGKEY=""

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(gzip -c -f -n)
COMPRESSLZ4=(lz4 -z -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
# WARNING: Do NOT modify these variables unless you know what you are
#          doing.
#
PKGEXT='.pkg.tar.xz'
#PKGEXT='.pkg.tar.lz4'
SRCEXT='.src.tar.gz'

# vim: set ft=sh ts=2 sw=2 et:
